// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: proto/remote.proto

/*
	Package web is a generated protocol buffer package.

	Web exposes a backend server over gRPC.

	It is generated from these files:
		proto/remote.proto

	It has these top-level messages:
		PlayerID
		Entity
		ActionRequest
		ActionResponse
		WorldResponse
		EntityResponse
*/
package web

import jspb "github.com/johanbrandhorst/protobuf/jspb"
import google_protobuf "github.com/johanbrandhorst/protobuf/ptypes/empty"

import (
	context "context"

	grpcweb "github.com/johanbrandhorst/protobuf/grpcweb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion2

type ActionRequest_Action int

const (
	ActionRequest_Move ActionRequest_Action = 0
)

var ActionRequest_Action_name = map[int]string{
	0: "Move",
}
var ActionRequest_Action_value = map[string]int{
	"Move": 0,
}

func (x ActionRequest_Action) String() string {
	return ActionRequest_Action_name[int(x)]
}

type PlayerID struct {
	ID string
}

// GetID gets the ID of the PlayerID.
func (m *PlayerID) GetID() (x string) {
	if m == nil {
		return x
	}
	return m.ID
}

// MarshalToWriter marshals PlayerID to the provided writer.
func (m *PlayerID) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.ID) > 0 {
		writer.WriteString(1, m.ID)
	}

	return
}

// Marshal marshals PlayerID to a slice of bytes.
func (m *PlayerID) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a PlayerID from the provided reader.
func (m *PlayerID) UnmarshalFromReader(reader jspb.Reader) *PlayerID {
	for reader.Next() {
		if m == nil {
			m = &PlayerID{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.ID = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a PlayerID from a slice of bytes.
func (m *PlayerID) Unmarshal(rawBytes []byte) (*PlayerID, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type Entity struct {
	ID    string
	X     int32
	Y     int32
	Theta int32
}

// GetID gets the ID of the Entity.
func (m *Entity) GetID() (x string) {
	if m == nil {
		return x
	}
	return m.ID
}

// GetX gets the X of the Entity.
func (m *Entity) GetX() (x int32) {
	if m == nil {
		return x
	}
	return m.X
}

// GetY gets the Y of the Entity.
func (m *Entity) GetY() (x int32) {
	if m == nil {
		return x
	}
	return m.Y
}

// GetTheta gets the Theta of the Entity.
func (m *Entity) GetTheta() (x int32) {
	if m == nil {
		return x
	}
	return m.Theta
}

// MarshalToWriter marshals Entity to the provided writer.
func (m *Entity) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.ID) > 0 {
		writer.WriteString(1, m.ID)
	}

	if m.X != 0 {
		writer.WriteInt32(2, m.X)
	}

	if m.Y != 0 {
		writer.WriteInt32(3, m.Y)
	}

	if m.Theta != 0 {
		writer.WriteInt32(4, m.Theta)
	}

	return
}

// Marshal marshals Entity to a slice of bytes.
func (m *Entity) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Entity from the provided reader.
func (m *Entity) UnmarshalFromReader(reader jspb.Reader) *Entity {
	for reader.Next() {
		if m == nil {
			m = &Entity{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.ID = reader.ReadString()
		case 2:
			m.X = reader.ReadInt32()
		case 3:
			m.Y = reader.ReadInt32()
		case 4:
			m.Theta = reader.ReadInt32()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Entity from a slice of bytes.
func (m *Entity) Unmarshal(rawBytes []byte) (*Entity, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type ActionRequest struct {
	Entity *Entity
	Action ActionRequest_Action
}

// GetEntity gets the Entity of the ActionRequest.
func (m *ActionRequest) GetEntity() (x *Entity) {
	if m == nil {
		return x
	}
	return m.Entity
}

// GetAction gets the Action of the ActionRequest.
func (m *ActionRequest) GetAction() (x ActionRequest_Action) {
	if m == nil {
		return x
	}
	return m.Action
}

// MarshalToWriter marshals ActionRequest to the provided writer.
func (m *ActionRequest) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Entity != nil {
		writer.WriteMessage(1, func() {
			m.Entity.MarshalToWriter(writer)
		})
	}

	if int(m.Action) != 0 {
		writer.WriteEnum(2, int(m.Action))
	}

	return
}

// Marshal marshals ActionRequest to a slice of bytes.
func (m *ActionRequest) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a ActionRequest from the provided reader.
func (m *ActionRequest) UnmarshalFromReader(reader jspb.Reader) *ActionRequest {
	for reader.Next() {
		if m == nil {
			m = &ActionRequest{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			reader.ReadMessage(func() {
				m.Entity = m.Entity.UnmarshalFromReader(reader)
			})
		case 2:
			m.Action = ActionRequest_Action(reader.ReadEnum())
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a ActionRequest from a slice of bytes.
func (m *ActionRequest) Unmarshal(rawBytes []byte) (*ActionRequest, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type ActionResponse struct {
	Entity *Entity
}

// GetEntity gets the Entity of the ActionResponse.
func (m *ActionResponse) GetEntity() (x *Entity) {
	if m == nil {
		return x
	}
	return m.Entity
}

// MarshalToWriter marshals ActionResponse to the provided writer.
func (m *ActionResponse) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Entity != nil {
		writer.WriteMessage(1, func() {
			m.Entity.MarshalToWriter(writer)
		})
	}

	return
}

// Marshal marshals ActionResponse to a slice of bytes.
func (m *ActionResponse) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a ActionResponse from the provided reader.
func (m *ActionResponse) UnmarshalFromReader(reader jspb.Reader) *ActionResponse {
	for reader.Next() {
		if m == nil {
			m = &ActionResponse{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			reader.ReadMessage(func() {
				m.Entity = m.Entity.UnmarshalFromReader(reader)
			})
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a ActionResponse from a slice of bytes.
func (m *ActionResponse) Unmarshal(rawBytes []byte) (*ActionResponse, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type WorldResponse struct {
	Tiles  []byte
	Width  int32
	Height int32
}

// GetTiles gets the Tiles of the WorldResponse.
func (m *WorldResponse) GetTiles() (x []byte) {
	if m == nil {
		return x
	}
	return m.Tiles
}

// GetWidth gets the Width of the WorldResponse.
func (m *WorldResponse) GetWidth() (x int32) {
	if m == nil {
		return x
	}
	return m.Width
}

// GetHeight gets the Height of the WorldResponse.
func (m *WorldResponse) GetHeight() (x int32) {
	if m == nil {
		return x
	}
	return m.Height
}

// MarshalToWriter marshals WorldResponse to the provided writer.
func (m *WorldResponse) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Tiles) > 0 {
		writer.WriteBytes(1, m.Tiles)
	}

	if m.Width != 0 {
		writer.WriteInt32(2, m.Width)
	}

	if m.Height != 0 {
		writer.WriteInt32(3, m.Height)
	}

	return
}

// Marshal marshals WorldResponse to a slice of bytes.
func (m *WorldResponse) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a WorldResponse from the provided reader.
func (m *WorldResponse) UnmarshalFromReader(reader jspb.Reader) *WorldResponse {
	for reader.Next() {
		if m == nil {
			m = &WorldResponse{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Tiles = reader.ReadBytes()
		case 2:
			m.Width = reader.ReadInt32()
		case 3:
			m.Height = reader.ReadInt32()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a WorldResponse from a slice of bytes.
func (m *WorldResponse) Unmarshal(rawBytes []byte) (*WorldResponse, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type EntityResponse struct {
	Payload []byte
}

// GetPayload gets the Payload of the EntityResponse.
func (m *EntityResponse) GetPayload() (x []byte) {
	if m == nil {
		return x
	}
	return m.Payload
}

// MarshalToWriter marshals EntityResponse to the provided writer.
func (m *EntityResponse) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Payload) > 0 {
		writer.WriteBytes(1, m.Payload)
	}

	return
}

// Marshal marshals EntityResponse to a slice of bytes.
func (m *EntityResponse) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a EntityResponse from the provided reader.
func (m *EntityResponse) UnmarshalFromReader(reader jspb.Reader) *EntityResponse {
	for reader.Next() {
		if m == nil {
			m = &EntityResponse{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Payload = reader.ReadBytes()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a EntityResponse from a slice of bytes.
func (m *EntityResponse) Unmarshal(rawBytes []byte) (*EntityResponse, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpcweb.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpcweb package it is being compiled against.
const _ = grpcweb.GrpcWebPackageIsVersion3

// Client API for Backend service

type BackendClient interface {
	NewPlayer(ctx context.Context, in *google_protobuf.Empty, opts ...grpcweb.CallOption) (*PlayerID, error)
	PerformAction(ctx context.Context, in *ActionRequest, opts ...grpcweb.CallOption) (*ActionResponse, error)
	WorldRequest(ctx context.Context, in *google_protobuf.Empty, opts ...grpcweb.CallOption) (*WorldResponse, error)
	EntityStream(ctx context.Context, in *google_protobuf.Empty, opts ...grpcweb.CallOption) (Backend_EntityStreamClient, error)
}

type backendClient struct {
	client *grpcweb.Client
}

// NewBackendClient creates a new gRPC-Web client.
func NewBackendClient(hostname string, opts ...grpcweb.DialOption) BackendClient {
	return &backendClient{
		client: grpcweb.NewClient(hostname, "web.Backend", opts...),
	}
}

func (c *backendClient) NewPlayer(ctx context.Context, in *google_protobuf.Empty, opts ...grpcweb.CallOption) (*PlayerID, error) {
	resp, err := c.client.RPCCall(ctx, "NewPlayer", in.Marshal(), opts...)
	if err != nil {
		return nil, err
	}

	return new(PlayerID).Unmarshal(resp)
}

func (c *backendClient) PerformAction(ctx context.Context, in *ActionRequest, opts ...grpcweb.CallOption) (*ActionResponse, error) {
	resp, err := c.client.RPCCall(ctx, "PerformAction", in.Marshal(), opts...)
	if err != nil {
		return nil, err
	}

	return new(ActionResponse).Unmarshal(resp)
}

func (c *backendClient) WorldRequest(ctx context.Context, in *google_protobuf.Empty, opts ...grpcweb.CallOption) (*WorldResponse, error) {
	resp, err := c.client.RPCCall(ctx, "WorldRequest", in.Marshal(), opts...)
	if err != nil {
		return nil, err
	}

	return new(WorldResponse).Unmarshal(resp)
}

func (c *backendClient) EntityStream(ctx context.Context, in *google_protobuf.Empty, opts ...grpcweb.CallOption) (Backend_EntityStreamClient, error) {
	srv, err := c.client.NewClientStream(ctx, false, true, "EntityStream", opts...)
	if err != nil {
		return nil, err
	}

	err = srv.SendMsg(in.Marshal())
	if err != nil {
		return nil, err
	}

	return &backendEntityStreamClient{srv}, nil
}

type Backend_EntityStreamClient interface {
	Recv() (*EntityResponse, error)
	grpcweb.ClientStream
}

type backendEntityStreamClient struct {
	grpcweb.ClientStream
}

func (x *backendEntityStreamClient) Recv() (*EntityResponse, error) {
	resp, err := x.RecvMsg()
	if err != nil {
		return nil, err
	}

	return new(EntityResponse).Unmarshal(resp)
}
